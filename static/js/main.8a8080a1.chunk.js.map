{"version":3,"sources":["components/common/ErrorBoundary.tsx","../lib/helper/utils.ts","../lib/customStore/PublishSubscribe.ts","../lib/customStore/Store.ts","../lib/index.tsx","store/ContextManagement.tsx","components/common/audit/index.tsx","pages/CreatePart.tsx","components/Part.tsx","components/Header.tsx","pages/Home.tsx","Routes.tsx","App.tsx","index.tsx"],"names":["ERROR_TYPES","ErrorBoundary","props","state","hasError","error","errorInfo","console","debug","this","children","type","Component","clone","o","JSON","parse","stringify","isObject","val","Array","isArray","PublishSubscribe","currentState","nextState","Error","forEach","item","mapStateToProps","currentValue","nextValue","a","b","callback","push","Store","initialState","value","Object","assign","publish","subscribe","instance","CustomStore","StateContext","createContext","StoreProvider","useState","partsList","setPartsList","getPartsFromStore","parts","useEffect","sampleAppContext","addPart","currList","add","Provider","WithAudit","dataid","dataaudit","STATUS","CreatePart","history","useHistory","ID","uuidv4","store","useContext","status","setStatus","name","setName","disable","setDisable","length","closeModal","goBack","handleChange","e","Modal","open","data-id","Header","Content","Form","Field","required","htmlFor","id","onChange","target","placeholder","autoComplete","Group","inline","Radio","label","checked","Actions","Button","onClick","desc","primary","disabled","Table_COLS_NAME","Part","tableData","setTableData","useReducer","action","column","data","slice","reverse","direction","dispatch","style","width","Table","sortable","celled","Row","HeaderCell","sorted","Body","map","key","Cell","verticalAlign","textAlign","Grid","Column","floated","title","modal","Home","padded","withRouter","location","previouslocation","useRef","isModal","current","exact","path","component","App","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8a8080a1.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport const ERROR_TYPES = {\n  DEFAULT: 'Something went wrong.We are working on it.Please check with Admin.',\n  APP_LEVEL: 'Something went wrong.Please check with Admin',\n  COMPONENT_LEVEL: 'Something went wrong.Please try again later',\n};\n\ntype MyProps = { type: string };\ntype MyState = { hasError: boolean };\n\nclass ErrorBoundary extends Component<MyProps, MyState> {\n  constructor(props: MyProps) {\n    super(props);\n\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  static getDerivedStateFromError(): MyState {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo): void {\n    // log error to an error reporting service\n    console.debug('error ', error, errorInfo);\n  }\n\n  render(): React.ReactNode {\n    const { hasError } = this.state;\n    const { children, type } = this.props;\n    if (hasError) {\n      // You can render any custom fallback UI\n      // eslint-disable-next-line react/react-in-jsx-scope\n      return <h1>{type}</h1>;\n    }\n\n    return children;\n  }\n}\n\nexport default ErrorBoundary;\n","interface GlobalObject {\n  [fieldName: string]: unknown;\n}\n\nconst clone = (o: GlobalObject): GlobalObject => JSON.parse(JSON.stringify(o));\n\nconst isObject = (val: any) =>\n  val != null && typeof val === 'object' && Array.isArray(val) === false;\n\nconst isEqual = (a: GlobalObject, b: GlobalObject): boolean => {\n  return JSON.stringify(a) === JSON.stringify(b);\n};\n\nexport { clone, isObject, isEqual };\n","/**\n * PublishSubscribe Class\n *  This calls provides functions for registering config, callback functions of consumers\n */\nimport { isObject, isEqual } from '../helper/utils';\nimport {\n  GlobalStoreObjectInterface,\n  ObserveCallbackType,\n  PublishCallbackType,\n} from '../definition/Type.definition';\n\nclass PublishSubscribe {\n  #publishStore;\n\n  constructor() {\n    this.#publishStore = [];\n  }\n\n  /**\n   * publish() : Calls the callback function .\n   *    if config Fuction is provided : return only the config part of the object\n   *    if No config function : returns the entire application State\n   * @param currentState : Current Application Object\n   *\n   * @param nextState : Application object after recent update\n   */\n  publish(\n    currentState: GlobalStoreObjectInterface, // Record<string, unknown>,\n    nextState: GlobalStoreObjectInterface, // Record<string, unknown>,\n  ): void {\n    if (!isObject(currentState))\n      throw new Error('currentState should be and object');\n    if (!isObject(nextState)) throw new Error('nextState should be and object');\n\n    this.#publishStore.forEach((item) => {\n      if (item.mapStateToProps) {\n        const currentValue = item?.mapStateToProps(currentState);\n        const nextValue = item.mapStateToProps(nextState);\n        if (!isEqual(currentValue, nextValue)) {\n          // console.debug('from lib :publishing ', nextValue);\n          item.callback(nextValue);\n        }\n      } else {\n        item.callback(nextState);\n      }\n    });\n  }\n\n  /**\n   * subscribe() : Consumers register the callback and config functions.\n   * @param callback : Register the consumer callback function, to be triggered on object update\n   *\n   * @param mapStateToProps : Config for observable part. similar to React-redux connect method\n   */\n  subscribe(\n    callback: PublishCallbackType,\n    mapStateToProps?: ObserveCallbackType,\n  ): void {\n    if (typeof callback !== 'function')\n      throw new Error('config should be a function');\n    if (mapStateToProps && typeof mapStateToProps !== 'function')\n      throw new Error('mapStateToProps config should be a function');\n    this.#publishStore.push({ callback, mapStateToProps });\n    // console.debug('subscribing ', this.#publishStore);\n  }\n}\n\nexport default PublishSubscribe;\n","/**\n * Base class for custom Store Libtrary\n * Maintains a global Immutable application State object\n * uses : Publish-Subscribe method to register and emit updates/events\n * Methods Exposed :\n * get() : To return the Immutable global State object\n * add() : To add object to the global object\n * subscribe(callbackFunction, objectToObserve) : Consumers can subscribe to updates.\n *    callbackFunction -> A callback function to send updates to the consumer\n *    objectToObserve -> a function to specify the observable part of the global\n *    application object. similar to \"React-redux connect method\".\n */\nimport { clone, isObject } from '../helper/utils';\nimport PublishSubscribe from './PublishSubscribe';\nimport {\n  GlobalStoreObjectInterface,\n  ObserveCallbackType,\n  PublishCallbackType,\n} from '../definition/Type.definition';\n\nclass Store {\n  /* Private members of Store class */\n  #store: GlobalStoreObjectInterface;\n\n  #pubsub;\n\n  /* make this class singleton */\n  static instance: Store;\n\n  static getInstance(val?: GlobalStoreObjectInterface): Store {\n    if (!Store.instance) {\n      Store.instance = new Store(val || {});\n    }\n    return Store.instance;\n  }\n\n  constructor(initialState = {}) {\n    if (!isObject(initialState))\n      throw new Error('initial state must be a object');\n    this.#store = initialState;\n    this.#pubsub = new PublishSubscribe();\n  }\n\n  /**\n   * get() : Return the Immutable copy of Application Object\n   */\n  get store(): Record<string, unknown> {\n    return clone(this.#store);\n  }\n\n  /**\n   * add() :\n      adds the object to the Application State object\n      Publishes the object update to the consumers via Publish method\n   * @param value : Valid JSON Object\n   */\n  add(value: GlobalStoreObjectInterface): void {\n    if (!isObject(value)) throw new Error('Only Objects can be added');\n    const currentState = clone(this.#store);\n    const nextState = Object.assign(clone(currentState), clone(value));\n    this.#pubsub.publish(currentState, nextState);\n    this.#store = clone(nextState);\n  }\n\n  /**\n   *\n   * @param state : Callback function to be called passing updated object to the consumer\n   *\n   * @param mapStateToProps : Config function, to define the observable part of the object.\n   *  similar to React-redux connect method.\n   * @returns\n   */\n  subscribe(\n    state: PublishCallbackType,\n    mapStateToProps?: ObserveCallbackType,\n  ): void {\n    this.#pubsub.subscribe(state, mapStateToProps);\n  }\n}\n\nexport default Store;\n","import Store from './customStore/Store';\n\nconst CustomStore = new Store();\nexport default CustomStore;\n","/*\n  Exports\n  1. StateContext: for components to listen to the application rootStore\n  2. StateProvider: uses Context API to define State provider for the application.\n  3. subscribe/Observe changes to state in custom State management library and provides the update\n      to the application using StateProvider\n*/\n\nimport React, { createContext, useEffect, useState } from 'react';\nimport CustomStore from '../../lib/index';\nimport {\n  PartsInterface,\n  GlobalStoreObjectInterface,\n  StateContextInterface,\n} from '../assets/definition/Type.definition';\n\nexport const StateContext = createContext<StateContextInterface | null>(null);\n\nconst StoreProvider: React.FC = (props) => {\n  const { children } = props;\n  const [partsList, setPartsList] = useState<PartsInterface[]>([]);\n\n  /*\n    callback methods for State library\n    1. getPartsFromStore : return the Parts array from global state\n    2. mapStateToProps : returns only object as observable as\n      defined by consumer , instead of listening to the entire global state object.\n      In, our case , we are interested in only listening to Parts[]\n  */\n  const getPartsFromStore = (state: PartsInterface[]): void =>\n    setPartsList(state || []);\n\n  const mapStateToProps = (state: GlobalStoreObjectInterface) => state.parts;\n\n  useEffect(() => {\n    /* subscribe/Observe changes to state in custom State management library */\n    CustomStore.subscribe(getPartsFromStore, mapStateToProps);\n  }, []);\n\n  const addPart = (val: PartsInterface) => {\n    const currList: PartsInterface[] = partsList;\n    currList.push(val);\n    CustomStore.add({ parts: currList });\n  };\n\n  const sampleAppContext: StateContextInterface = {\n    addPart,\n    partsList,\n  };\n\n  return (\n    <StateContext.Provider value={sampleAppContext}>\n      {children}\n    </StateContext.Provider>\n  );\n};\n\nexport default StoreProvider;\n","import React, { useEffect } from 'react';\n\nconst COMPONENT_TYPE = {\n  CLICK: 'click',\n  NAVIAGTION: 'navigation',\n};\n\nconst WithAudit = (props) => {\n  const { dataid, dataaudit, children, type } = props;\n  useEffect(() => {\n    if (type === COMPONENT_TYPE.CLICK && dataid && dataaudit) {\n      // console.log(\n      //   'Call your service to log user click. Use attributes like - dataid, dataaudit for additional details',\n      // );\n    }\n  }, [dataid, dataaudit, type]);\n\n  return <>{children}</>;\n};\n\nexport default WithAudit;\n","import React, { useState, useEffect, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Button, Modal, Form } from 'semantic-ui-react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { StateContext } from '../store/ContextManagement';\nimport WithAudit from '../components/common/audit/index';\n\nconst STATUS = {\n  IN: 'Checked In',\n  OUT: 'Checked Out',\n};\n\ntype PartsStatusType = 'Checked In' | 'Checked Out' | '';\n\nconst CreatePart: React.FC = () => {\n  /* consts */\n  const history = useHistory();\n  const ID: string = uuidv4();\n  const store = useContext(StateContext);\n\n  /*  States */\n  const [status, setStatus] = useState<PartsStatusType>('');\n  const [name, setName] = useState<string>('');\n  const [disable, setDisable] = useState<boolean>(true);\n\n  /* effects */\n  useEffect(() => {\n    setDisable(!(status.length > 0 && name.length > 0));\n  }, [status, name]);\n\n  /* handlers */\n  const closeModal = () => {\n    history.goBack();\n  };\n\n  const save = () => {\n    /* dispatch */\n    if (store) {\n      store.addPart({\n        id: ID,\n        name,\n        status,\n      });\n    }\n\n    /* close the modal and return to the list page */\n    closeModal();\n  };\n\n  const handleChange = (e: React.FormEvent<HTMLInputElement>, value) =>\n    setStatus(value);\n\n  return (\n    <Modal open data-id=\"createPartModal\">\n      <Modal.Header>\n        <h3>Add Parts</h3>\n      </Modal.Header>\n      <Modal.Content>\n        <Form>\n          <Form.Field required>\n            <label htmlFor=\"name\">Part Name</label>\n            <input\n              type=\"text\"\n              id=\"name\"\n              onChange={(e) => setName(e.target.value)}\n              placeholder=\"Part Name\"\n              autoComplete=\"off\"\n            />\n          </Form.Field>\n          <Form.Field required>\n            <label htmlFor=\"status\"> Part Status </label>\n            <Form.Group inline id=\"status\">\n              <Form.Radio\n                label=\"Checked In\"\n                value={STATUS.IN}\n                checked={status === STATUS.IN}\n                onChange={(e, { value }) => handleChange(e, value)}\n              />\n\n              <Form.Radio\n                label=\"Checked Out\"\n                value={STATUS.OUT}\n                checked={status === STATUS.OUT}\n                onChange={(e, { value }) => handleChange(e, value)}\n              />\n            </Form.Group>\n          </Form.Field>\n        </Form>\n      </Modal.Content>\n      <Modal.Actions>\n        <Button onClick={closeModal}>Cancel</Button>\n        <WithAudit\n          dataid=\"createPartsButton\"\n          dataaudit={{\n            desc: 'creating new Spare parts',\n          }}\n          type=\"click\"\n        >\n          <Button onClick={save} primary disabled={disable}>\n            Save\n          </Button>\n        </WithAudit>\n      </Modal.Actions>\n    </Modal>\n  );\n};\n\nexport default CreatePart;\n","import React, { useState, useEffect, useContext, useReducer } from 'react';\nimport { Table } from 'semantic-ui-react';\nimport { StateContext } from '../store/ContextManagement';\n\nimport { PartsInterface } from '../assets/definition/Type.definition';\n\nconst Table_COLS_NAME = {\n  ID: 'Part ID',\n  NAME: 'Part Name',\n  STATUS: 'Part Status',\n};\n\n// interface Parts {\n//   id: string;\n//   name: string;\n//   status: string;\n// }\n\nconst Part: React.FC = (props) => {\n  const store = useContext(StateContext);\n  const [tableData, setTableData] = useState<PartsInterface[]>([]);\n  const exampleReducer = (state, action) => {\n    switch (action.type) {\n      case 'CHANGE_SORT': {\n        let currState = { ...state };\n        if (state.column === action.column) {\n          currState = {\n            ...state,\n            data: state.data.slice().reverse(),\n            direction:\n              state.direction === 'ascending' ? 'descending' : 'ascending',\n          };\n        } else {\n          currState = {\n            ...state,\n            data: state.data,\n            direction: 'ascending',\n            column: action.column,\n          };\n        }\n\n        return currState;\n      }\n      case 'UPDATE_TABLE': {\n        return {\n          ...state,\n          data: tableData,\n        };\n      }\n\n      default:\n        throw new Error();\n    }\n  };\n  const [state, dispatch] = useReducer(exampleReducer, {\n    column: null,\n    data: tableData,\n    direction: null,\n  });\n\n  const { column, data, direction } = state;\n\n  useEffect(() => {\n    if (store?.partsList) {\n      setTableData(store.partsList.slice().reverse());\n    }\n  }, [store]);\n\n  useEffect(() => {\n    dispatch({ type: 'UPDATE_TABLE', data: tableData });\n  }, [tableData]);\n\n  return (\n    <div style={{ width: '100%' }}>\n      <Table sortable celled>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell\n              sorted={column === Table_COLS_NAME.ID ? direction : null}\n              onClick={() =>\n                dispatch({ type: 'CHANGE_SORT', column: Table_COLS_NAME.ID })\n              }\n            >\n              {Table_COLS_NAME.ID}\n            </Table.HeaderCell>\n            <Table.HeaderCell\n              sorted={column === Table_COLS_NAME.NAME ? direction : null}\n              onClick={() =>\n                dispatch({ type: 'CHANGE_SORT', column: Table_COLS_NAME.NAME })\n              }\n            >\n              {Table_COLS_NAME.NAME}\n            </Table.HeaderCell>\n            <Table.HeaderCell\n              sorted={column === Table_COLS_NAME.STATUS ? direction : null}\n              onClick={() =>\n                dispatch({\n                  type: 'CHANGE_SORT',\n                  column: Table_COLS_NAME.STATUS,\n                })\n              }\n            >\n              {Table_COLS_NAME.STATUS}\n            </Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {data.map(({ id, name, status }) => (\n            <Table.Row key={id}>\n              <Table.Cell>{id}</Table.Cell>\n              <Table.Cell>{name}</Table.Cell>\n              <Table.Cell>{status}</Table.Cell>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n      {data.length <= 0 && (\n        <p\n          style={{\n            verticalAlign: 'center',\n            textAlign: 'center',\n          }}\n        >\n          No parts to show. Please add.\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default Part;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Grid, Button, Icon } from 'semantic-ui-react';\n\nconst Header: React.FC = () => {\n  const history = useHistory();\n\n  const createParts = () => {\n    history.push('create', {\n      /* This attribute determines if page reload is required on route change. Refer routes.tsx  */\n      modal: true,\n    });\n  };\n  return (\n    <Grid.Row textAlign=\"left\" verticalAlign=\"middle\">\n      <Grid.Column width={12}>\n        {' '}\n        <h4>Welcome to Spares Inventory </h4>\n      </Grid.Column>\n      <Grid.Column floated=\"right\" width={2}>\n        <Button primary floated=\"right\" title=\"Add Parts\" onClick={createParts}>\n          Add Parts\n        </Button>\n      </Grid.Column>\n    </Grid.Row>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport { Grid } from 'semantic-ui-react';\nimport Part from '../components/Part';\nimport Header from '../components/Header';\nimport ErrorBoundary, { ERROR_TYPES } from '../components/common/ErrorBoundary';\n\nconst Home: React.FC = () => {\n  return (\n    <Grid padded data-id=\"homePage\">\n      <ErrorBoundary type={ERROR_TYPES.APP_LEVEL}>\n        <Header />\n      </ErrorBoundary>\n      <Grid.Row>\n        <ErrorBoundary type={ERROR_TYPES.APP_LEVEL}>\n          <Part />\n        </ErrorBoundary>\n      </Grid.Row>\n    </Grid>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useRef } from 'react';\nimport {\n  Route,\n  Switch,\n  withRouter,\n  RouteComponentProps,\n} from 'react-router-dom';\n// import ErrorBoundary, { ERROR_TYPES } from './components/common/ErrorBoundary';\n\nimport CreatePart from './pages/CreatePart';\nimport Home from './pages/Home';\nimport StoreProvider from './store/ContextManagement';\n\n/* defining Location state structure */\ntype LocationState = {\n  modal?: boolean;\n};\n\n/* Extending Types of Route */\ntype Props = RouteComponentProps<{}, {}, LocationState>;\n\nconst Routes: React.FC<Props> = (props: Props) => {\n  const { location, history } = props;\n  const previouslocation = useRef(location);\n\n  const isModal = !!(\n    location?.state?.modal && previouslocation.current !== location\n  );\n\n  useEffect(() => {\n    if (\n      history.action !== 'POP' &&\n      (!location.state || !location.state.modal)\n    ) {\n      previouslocation.current = location;\n    }\n  }, [location, history.action]);\n\n  return (\n    // <ErrorBoundary type={ERROR_TYPES.DEFAULT}>\n    <StoreProvider>\n      <Switch location={previouslocation.current || location}>\n        <Route exact path=\"/\" component={Home} />\n      </Switch>\n      {isModal && <Route path=\"/create\" component={CreatePart} />}\n    </StoreProvider>\n    // </ErrorBoundary>\n  );\n};\n\nexport default withRouter(Routes);\n","import React from 'react';\nimport ErrorBoundary, { ERROR_TYPES } from './components/common/ErrorBoundary';\nimport StoreProvider from './store/ContextManagement';\nimport Routes from './Routes';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <ErrorBoundary type={ERROR_TYPES.DEFAULT}>\n        <StoreProvider>\n          <Routes />\n        </StoreProvider>\n      </ErrorBoundary>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport App from './App';\n\nimport 'assets/styles/index.css';\n// Adding CSS for semantic-ui\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}